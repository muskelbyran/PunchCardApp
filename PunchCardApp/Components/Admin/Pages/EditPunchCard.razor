@*
    Baserad på referens (3) The Complete Tutorial [ASP.NET Core - G-kraven] - Hans Mattin-Lassei (2024-04-04)
    Även tagit hjälp av ChatGPT med concurrency.
 *@
@page "/punchcards/edit/{userId:guid}"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using PunchCardApp.Data
@using PunchCardApp.Entities
@using PunchCardApp.Models

@rendermode InteractiveServer

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<EditUser> Logger
@inject PunchCardService PunchCardService

<PageTitle>Edit User Profile</PageTitle>
<div class="details">
    <section class="punchcard-management">
        <h2>Punch Card Management</h2>
        <EditForm Model="PunchCardForm" OnValidSubmit="OnValidSubmitPunchCardAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group">
                <label>Type</label>
                <InputText @bind-Value="PunchCardForm.Type" />
                <ValidationMessage For="() => PunchCardForm.Type" />
            </div>
            <div class="input-group">
                <label>Total Uses</label>
                <InputNumber @bind-Value="PunchCardForm.TotalUses" />
                <ValidationMessage For="() => PunchCardForm.TotalUses" />
            </div>
            <div class="form-buttons">
                <button class="btn-theme" type="submit">Save PunchCard</button>
            </div>
        </EditForm>
        <h3>Existing Punch Cards</h3>
        @if (UserPunchCards != null && UserPunchCards.Any())
        {
            <table>
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>Purchased Date</th>
                        <th>Uses Left</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var card in UserPunchCards)
                    {
                        <tr>
                            <td>@card.Type</td>
                            <td>@card.PurchasedDate.ToShortDateString()</td>
                            <td>@card.UsesLeft</td>
                            <td>
                                <button @onclick="() => UsePunchCardAsync(card.Id, card.UserProfileId)">Use</button>
                                <button @onclick="() => DeletePunchCardAsync(card.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No punch cards found.</p>
        }

        <h3>Historik över klippkort</h3>
        @if (UserPunchCards != null && UserPunchCards.Any())
        {
            Console.WriteLine($"Fetched {UserPunchCards.Count} punch cards for UserProfileId: [userProfileId]");

            @foreach (var card in UserPunchCards)
            {
                <div class="punch-card-history">
                    <h4>Klippkort: @card.Type</h4>
                    <p>Köpt: @card.PurchasedDate.ToShortDateString()</p>
                    <p>Totalt antal användningar: @card.TotalUses</p>
                    <p>Kvarvarande användningar: @card.UsesLeft</p>

                    <h5>Användarhistorik:</h5>
                    @if (card.PunchCardUses.Any())
                    {
                        <ul>
                            @foreach (var use in card.PunchCardUses)
                            {
                                <li>@use.UsedDate.ToShortDateString() av @use.UsedBy</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>Ingen användarhistorik tillgänglig.</p>
                    }
                </div>
            }
        }
        else
        {
            Console.WriteLine("No punch cards found for the current user.");
            <p>Ingen historik att visa.</p>
        }

    </section>
</div>

@code {
    [Parameter]
    public Guid userId { get; set; }

    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = "";

    public PunchCardFormModel PunchCardForm { get; set; } = new();
    public List<PunchCardEntity> UserPunchCards { get; set; } = new();
    private List<PunchCardHistoryModel> PunchCardHistory { get; set; } = new();
    public List<PunchCardHistoryModel> UserPunchCardHistory { get; set; } = new();

    private string? userName;
    private ApplicationUser? selectedUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserPunchCardsAsync();
        PunchCardHistory = await PunchCardService.GetPunchCardHistoryAsync(userId.ToString());

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

                if (userId != null)
                {
                    selectedUser = await DbContext.Users
                        .AsNoTracking() 
                        .Include(u => u.UserProfile) 
                        .FirstOrDefaultAsync(u => u.Id == userId);

                    if (selectedUser != null)
                    {
                        var firstName = selectedUser.UserProfile?.FirstName ?? "No First Name";
                        var lastName = selectedUser.UserProfile?.LastName ?? "No Last Name";

                        userName = $"{firstName} {lastName}";
                        Console.WriteLine($"User's Name: {userName}");

                    }
                    else
                    {
                        Console.WriteLine("User not found.");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user details: {ex.Message}");
        }
    }

    private async Task OnValidSubmitPunchCardAsync()
    {
        try
        {
            var currentUser = await DbContext.Users
                .Include(u => u.UserProfile)
                .FirstOrDefaultAsync(u => u.Id == userId.ToString());

            if (currentUser != null && !string.IsNullOrEmpty(currentUser.UserProfileId))
            {
                await PunchCardService.CreatePunchCardAsync(
                      currentUser.UserProfileId,
                      PunchCardForm.Type,
                      PunchCardForm.TotalUses
                    );

                StatusMessage = "Punch card created successfully!";
                await LoadUserPunchCardsAsync();
            }
            else
            {
                StatusMessage = "User or profile not found.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error creating punch card: {ex.Message}");
            StatusMessage = "An error occurred while creating the punch card.";
        }
    }

    private async Task LoadUserPunchCardsAsync()
    {
        try
        {
            var currentUser = await DbContext.Users
                              .Include(u => u.UserProfile)
                              .FirstOrDefaultAsync(u => u.Id == userId.ToString());

            if (currentUser != null && !string.IsNullOrEmpty(currentUser.UserProfileId))
            {
                UserPunchCards = await DbContext.PunchCards
                                .Where(pc => pc.UserProfileId == currentUser.UserProfileId)
                                .Include(pc => pc.PunchCardUses)
                                .ToListAsync();            

                PunchCardHistory = await PunchCardService.GetPunchCardHistoryAsync(currentUser.UserProfileId);
            }
            else
            {
                StatusMessage = "User or profile not found.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error loading punch cards: {ex.Message}");
            StatusMessage = "An error occurred while loading punch cards.";
        }
    }

    private async Task CreateOrUpdatePunchCardAsync()
    {
        try
        {
            PunchCardForm = new PunchCardFormModel
        {
            Type = "",
            TotalUses = 0
        };

            var punchCard = new PunchCardEntity
        {
            UserProfileId = userId.ToString(),
            Type = PunchCardForm.Type,
            PurchasedDate = DateTime.Now,
            TotalUses = PunchCardForm.TotalUses,
            UsesLeft = PunchCardForm.TotalUses,
            PunchCardUses = new List<PunchCardUseEntity>()
        };

            UserPunchCards = await DbContext.PunchCards
                                   .Where(pc => pc.UserProfileId == userId.ToString())
                                   .Include(pc => pc.PunchCardUses)
                                   .ToListAsync();

            DbContext.PunchCards.Add(punchCard);
            await DbContext.SaveChangesAsync();

            StatusMessage = "Punch card created successfully!";
            await LoadUserPunchCardsAsync();
        }
        catch (Exception ex)
        {
            StatusMessage = "An error occurred while creating the punch card.";
            Logger.LogError($"Error creating punch card: {ex.Message}");
        }
    }

	private async Task UsePunchCardAsync(int punchCardId, string usedBy)
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		try
		{
			if (userName != null)
			{

				await PunchCardService.UsePunchCardAsync(punchCardId, userName);

				StatusMessage = "Punch card used successfully!";
				await LoadUserPunchCardsAsync();
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Error using punch card: {ex.Message}");
			StatusMessage = ex.Message;
		}
	}

private async Task DeletePunchCardAsync(int punchCardId)
{
    try
    {
        var punchCard = await DbContext.PunchCards.FindAsync(punchCardId);
        
        if(punchCard != null)
        {
            DbContext.PunchCards.Remove(punchCard);
            await DbContext.SaveChangesAsync();
            StatusMessage = "Punch card deleted successfully!";
            await LoadUserPunchCardsAsync();
        }
    }
    catch (Exception ex)
    {
        StatusMessage = "An error occurred while deleting the punch card.";
        Logger.LogError($"Error deleting punch card: {ex.Message}");
    }
}

public class PunchCardFormModel
{
    [Required]
    public string Type { get; set; } = "";

    [Required]
    [Range(1, int.MaxValue, ErrorMessage = "Total uses must be at least 1.")]
    public int TotalUses { get; set; }
}
}