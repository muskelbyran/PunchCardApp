@*  Referens: ChatGpt created the first version of the tabs based on some really old tabs
    from a former website I made a long long time ago. *@
@page "/admin/aardvark"

@using PunchCardApp.Components.Admin.Components
@using PunchCardApp.Components.Assets
@using PunchCardApp.Models

@layout AdminLayout
@rendermode InteractiveServer

<PageTitle>Klippkort</PageTitle>

<AuthorizeView>
	<Authorized>
		<main class="main-admin-container">
			<div class="aardvark-toast">
				<StatusToast Message="@StatusMessage"
							 Class="alert-success"
							 Duration="8000"
							 OnDismiss="@(() => StatusMessage = "")" />
			</div>
			<div class="main-admin">				
				<div class="search-create-container">
					<div class="search-box">
						<h3>Sök kund:</h3>
						<button class="btn btn-primary mt-2" @onclick="ShowSearch">Sök</button>
					</div>
					<div class="create-user-box">
						<h3>Skapa kund:</h3>
						<button class="btn btn-primary mt-2" @onclick="ShowCreateUser">Skapa ny användare</button>
					</div>
					<div class="create-user-box">
						<h3>Events:</h3>
						<button class="btn btn-primary mt-2" @onclick="ShowEvents">Events</button>
					</div>
					<div class="create-user-box">
						<h3>Statistik:</h3>
						<button class="btn btn-primary mt-2" @onclick="ShowStats">Stats</button>
					</div>
				</div>
				<div class="current-view">
					@switch (currentView)
					{
						case AdminView.Search:
							<div class="search-user mt-3">
								<h4>Sökresultat:</h4>
								<input class="form-control mb-2" placeholder="Sök kund" @bind="searchString" />
								<button class="btn btn-primary" @onclick="SearchUsers">Sök</button>
								@if (filteredUsers?.Count > 0)
								{
									<table class="table mt-3">
										<thead>
											<tr>
												<th>Id</th>
												<th>User Name</th>
												<th>Email</th>
												<th></th>
											</tr>
										</thead>
										<tbody>
											@foreach (var user in filteredUsers)
											{
												<tr>
													<td>@user.Id</td>
													<td>@(user.UserProfile?.FirstName ?? "N/A") @(user.UserProfile?.LastName ?? "N/A")</td>
													<td>@user.Email</td>
													<td>
														<button class="btn btn-primary" @onclick="() => EditUser(user)">Hantera</button>
													</td>
												</tr>
											}
										</tbody>
									</table>
								}
								else if (filteredUsers != null)
								{
									<p>Det hittades ingen användare med det namnet.</p>
								}
							</div>
							break;

						case AdminView.CreateUser:
							<div class="create-user mt-3">								
								<CreateUser />
							</div>
							break;

						case AdminView.Events:
							<div class="event-info mt-3">
								<Events />
							</div>
							break;

						case AdminView.Stats:
							<Stats />
							break;

						case AdminView.Tabs when selectedUser != null:
							<ul class="tabs">
								@foreach (var tab in Enum.GetValues<Tab>())
								{
									<li class="tab-item">
										<button class="tab-button @(selectedTab == tab ? "active" : "")"
										   @onclick="() => SelectTab(tab)">
											@tab
										</button>
									</li>
								}
							</ul>
							<div class="tab-content mt-3">
								<DynamicComponent Type="CurrentTabComponent" Parameters="CurrentTabParameters" />
							</div>
							break;
					}
				</div>
			</div>
		</main>
	</Authorized>
</AuthorizeView>

@code {
	private enum AdminView { None, Search, CreateUser, Events, Stats, Tabs }
	private AdminView currentView = AdminView.None;

	private enum Tab { Kund, Klippkort, Tasks }

	private List<ApplicationUser>? filteredUsers;
	private ApplicationUser? selectedUser;
	private string? searchString;
	private Tab selectedTab = Tab.Kund;
	private int userCount;
	private string StatusMessage = "";

	private Dictionary<Tab, Type> tabComponentMap = new()
	{
		{ Tab.Kund, typeof(UserProfileTab) },
		{ Tab.Klippkort, typeof(UserPunchCardTab) },
		{ Tab.Tasks, typeof(UserContactTab) }
	};

	private Dictionary<string, object> CurrentTabParameters => selectedUser == null
		? new()
		: new() { { "User", selectedUser }, { "OnStatusMessageChanged", EventCallback.Factory.Create<string>(this, HandleStatusMessage) } };

	private Type CurrentTabComponent => tabComponentMap[selectedTab];

	protected override async Task OnInitializedAsync()
	{
		userCount = await DbContext.Users.CountAsync();
	}

	private void ShowSearch() => currentView = AdminView.Search;
	private void ShowCreateUser() => currentView = AdminView.CreateUser;
	private void ShowEvents() => currentView = AdminView.Events;
	private void ShowStats() => currentView = AdminView.Stats;

	private void EditUser(ApplicationUser user)
	{
		selectedUser = user;
		currentView = AdminView.Tabs;
		SelectTab(Tab.Kund);
	}

	private void SelectTab(Tab tab) => selectedTab = tab;

	private async Task SearchUsers()
	{
		if (!string.IsNullOrWhiteSpace(searchString))
		{
			var normalized = searchString.ToLower();
			filteredUsers = await DbContext.Users
				.Include(u => u.UserProfile)
				.Where(u => u.UserProfile != null &&
							EF.Functions.Like(u.UserProfile.FirstName.ToLower(), $"%{normalized}%"))
				.ToListAsync();
		}
		else
		{
			filteredUsers = new();
		}
	}

	private Task HandleStatusMessage(string message)
	{
		StatusMessage = message;
		StateHasChanged();
		return Task.CompletedTask;
	}
}