@namespace PunchCardApp.Components.Admin.Components
@using PunchCardApp.Entities
@inject ApplicationDbContext DbContext

<UserAnalytics />
<div class="stats-splitscreen">
        

    <div class="stats-grid">
        <div class="stats-card">
            <p>Antal registrerade användare: @userCount</p>
            <br />
            <h5>Översikt av Klippkort</h5>
            <p>Totalt antal klippkort: @totalPunchCards</p>
            <p>Total antal användningar: @totalPunches</p>
            </div>
        <div class="stats-card">
            <h5>Top 5 användare med flest klippkort:</h5>
            <ul>
                @foreach (var user in topUsers)
                {
                <li>@user.Name - Klippkort: @user.PunchCardCount</li>
                }
            </ul>
        </div>

        <div class="stats-card">
            <h5>Sista 5 Händelser</h5>
            <ul>
                @foreach (var eventItem in recentEvents)
                {
                    <li>@eventItem</li>
                }
            </ul>
        </div>
        <div class="stats-card">
            <h5>Sök Klippkort</h5>
            <input class="form-control mb-2" placeholder="Sök typ eller längd..." @bind="searchQuery" />
            <button class="btn btn-primary" @onclick="SearchPunchCards">Sök</button>

            @if (searchedPunchCards != null && searchedPunchCards.Any())
            {
                <h6>Resultat:</h6>
                <ul>
                    @foreach (var card in searchedPunchCards)
                    {
                        <li>@card.Type - Längd: @card.Length</li>
                    }
                </ul>
            }
            else if (!string.IsNullOrEmpty(searchQuery))
            {
                <p>Inga klippkort hittades.</p>
            }
        </div>
        </div>
</div>

@code {
    private int userCount;
    private int totalPunchCards;
    private int totalPunches;
    private List<(string Name, int PunchCardCount)> topUsers = new();
    private List<PunchCardEntity> searchedPunchCards = new();
    private string searchQuery = "";
    private List<string> recentEvents = new();

    protected override async Task OnInitializedAsync()
    {
        userCount = await DbContext.Users.CountAsync();
        totalPunchCards = await DbContext.PunchCards.CountAsync();
        totalPunches = await DbContext.PunchCardUses.CountAsync();

        var topUsersQuery = await DbContext.PunchCards
            .Where(pc => pc.UserProfileId != null)
            .GroupBy(pc => pc.UserProfileId)
            .Select(g => new
            {
                UserProfileId = g.Key,
                PunchCardCount = g.Count()
            })
            .OrderByDescending(g => g.PunchCardCount)
            .Take(5)
            .ToListAsync();

        topUsers = new List<(string Name, int PunchCardCount)>();

        foreach (var user in topUsersQuery)
        {
            var userName = await DbContext.Users
                .Where(u => u.UserProfileId == user.UserProfileId)
                .Select(u => u.UserProfile != null
                    ? u.UserProfile.FirstName + " " + u.UserProfile.LastName
                    : "N/A")
                .FirstOrDefaultAsync();

            topUsers.Add((Name: userName ?? "N/A", PunchCardCount: user.PunchCardCount));
        }

        recentEvents = await DbContext.PunchCardUses
            .OrderByDescending(pc => pc.UsedDate)
            .Take(5)
            .Select(pc => $"Klippt av {pc.UsedBy} den {pc.UsedDate.ToShortDateString()}")
            .ToListAsync();
    }



    private async Task SearchPunchCards()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            searchedPunchCards = await DbContext.PunchCards
                .Where(pc => EF.Functions.Like(pc.Type, $"%{searchQuery}%") || pc.Length.ToString().Contains(searchQuery))
                .ToListAsync();
        }
        else
        {
            searchedPunchCards = new List<PunchCardEntity>();
        }
    }
}
