@*
    Baserad på referens (3) The Complete Tutorial [ASP.NET Core - G-kraven] - Hans Mattin-Lassei (2024-04-04)
    Även tagit hjälp av ChatGPT med concurrency.
 *@
@page "/mob/punchcards"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using PunchCardApp.Data
@using PunchCardApp.Entities
@using PunchCardApp.Models

@rendermode InteractiveServer

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject PunchCardService PunchCardService

<PageTitle>Klippkortshistorik</PageTitle>
<div class="details">
    <section class="punchcard-management">
        <h2>Punch Card Management</h2>
        <h3>Existing Punch Cards</h3>
        @if (UserPunchCards != null && UserPunchCards.Any())
        {
            <table>
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>Purchased Date</th>
                        <th>Uses Left</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var card in UserPunchCards)
                    {
                        <tr>
                            <td>@card.Type</td>
                            <td>@card.PurchasedDate.ToShortDateString()</td>
                            <td>@card.UsesLeft</td>
              
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No punch cards found.</p>
        }

        <h3>Historik över klippkort</h3>
        @if (UserPunchCards != null && UserPunchCards.Any())
        {
            Console.WriteLine($"Fetched {UserPunchCards.Count} punch cards for UserProfileId: [userProfileId]");

            @foreach (var card in UserPunchCards)
            {
                <div class="punch-card-history">
                    <h4>Klippkort: @card.Type</h4>
                    <p>Köpt: @card.PurchasedDate.ToShortDateString()</p>
                    <p>Totalt antal användningar: @card.TotalUses</p>
                    <p>Kvarvarande användningar: @card.UsesLeft</p>

                    <h5>Användarhistorik:</h5>
                    @if (card.PunchCardUses.Any())
                    {
                        <ul>
                            @foreach (var use in card.PunchCardUses)
                            {
                                <li>@use.UsedDate.ToShortDateString() av @use.UsedBy</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>Ingen användarhistorik tillgänglig.</p>
                    }
                </div>
            }
        }
        else
        {
            Console.WriteLine("No punch cards found for the current user.");
            <p>Ingen historik att visa.</p>
        }

    </section>
</div>

@code {
    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = "";

    public PunchCardFormModel PunchCardForm { get; set; } = new();
    public List<PunchCardEntity> UserPunchCards { get; set; } = new();
    private List<PunchCardHistoryModel> PunchCardHistory { get; set; } = new();
    public List<PunchCardHistoryModel> UserPunchCardHistory { get; set; } = new();

    private string? userId; 

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            if (currentUser != null)
            {
                userId = currentUser.Id;
                await LoadUserPunchCardsAsync();
                PunchCardHistory = await PunchCardService.GetPunchCardHistoryAsync(userId);
            }
            else
            {
                Console.WriteLine("Hittar inte användare!");
            }
        }
    }

    private async Task LoadUserPunchCardsAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("Användare är null!");
                return;
            }

            var userProfileId = await DbContext.Users
                .Where(u => u.Id == userId)
                .Select(u => u.UserProfileId) 
                .FirstOrDefaultAsync();

            if (string.IsNullOrEmpty(userProfileId))
            {
                Console.WriteLine("UserProfileId är null eller ej satt för användare: " + userId);
                return;
            }

            UserPunchCards = await DbContext.PunchCards
                .Where(pc => pc.UserProfileId == userProfileId)
                .Include(pc => pc.PunchCardUses)
                .ToListAsync();

            Console.WriteLine($"Hittade {UserPunchCards.Count} klippkort.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Gick ej att ladda klippkort: {ex.Message}");
            StatusMessage = "Fel uppstod när klippkort skulle laddas.";
        }
    }

    public class PunchCardFormModel
    {
        [Required]
        public string Type { get; set; } = "";

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Antal klipp måste vara minst 1.")]
        public int TotalUses { get; set; }
    }
}