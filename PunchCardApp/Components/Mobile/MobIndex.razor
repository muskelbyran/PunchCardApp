@*
    Baserad på referens (3) The Complete Tutorial [ASP.NET Core - G-kraven] - Hans Mattin-Lassei (2024-04-04)
    Även tagit hjälp av ChatGPT med concurrency.
 *@
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using PunchCardApp.Data
@using PunchCardApp.Entities
@using PunchCardApp.Models

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject PunchCardService PunchCardService

<section id="mobile-body">
 
    <div class="mobile-container">

        @if (UserPunchCards != null && UserPunchCards.Any())
        {
            @foreach (var card in UserPunchCards)
            {
                <div class="punch-card">
                    <h4>@card.Type</h4>                  
                    @*     <button @onclick="TriggerConfetti" class="btn btn-pink-moon" id="confettiButton">
                        Använd!
                    </button> *@
                    <button class="btn btn-copper">Färdigknådad</button>
                    <div class="punches">
                        @for (int i = 0; i < card.TotalUses; i++)
                        {
                            var circleColor = i < (card.TotalUses - card.UsesLeft) ? "pink" : "black";
                            <i class="fa-solid fa-circle" style="color: @circleColor;"></i>
                        }
                    </div>

                </div>
            }
        }
        else
        {
            <p>Ingen historik att visa.</p>
        }       
    </div>

    <div class="punch-card">
        <div id="form-button">
            <button class="w-100 btn btn-lg btn-copper">Nyheter</button>
        </div>
    </div>

    <div class="punch-card">
        <div id="form-button">
            <button class="w-100 btn btn-lg btn-copper">Feedback</button>
        </div>
    </div>
    <div class="punch-card">
        <div id="form-button">
            <button class="w-100 btn btn-lg btn-copper">Kontakt</button>
        </div>
    </div>
    <div class="punch-card">
        <div id="form-button">
            <button class="w-100 btn btn-lg btn-copper">Backoffice</button>
        </div>
    </div>
</section>

@code {
    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = "";

    public PunchCardFormModel PunchCardForm { get; set; } = new();
    public List<PunchCardEntity> UserPunchCards { get; set; } = new();
    private List<PunchCardHistoryModel> PunchCardHistory { get; set; } = new();
    public List<PunchCardHistoryModel> UserPunchCardHistory { get; set; } = new();

    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            if (currentUser != null)
            {
                userId = currentUser.Id;
                await LoadUserPunchCardsAsync();
                PunchCardHistory = await PunchCardService.GetPunchCardHistoryAsync(userId);
            }
            else
            {
                Console.WriteLine("Hittar inte användare!");
            }
        }
    }

    private async Task LoadUserPunchCardsAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("Användare är null!");
                return;
            }

            var userProfileId = await DbContext.Users
                .Where(u => u.Id == userId)
                .Select(u => u.UserProfileId)
                .FirstOrDefaultAsync();

            if (string.IsNullOrEmpty(userProfileId))
            {
                Console.WriteLine("UserProfileId är null eller ej satt för användare: " + userId);
                return;
            }

            UserPunchCards = await DbContext.PunchCards
                .Where(pc => pc.UserProfileId == userProfileId)
                .Include(pc => pc.PunchCardUses)
                .ToListAsync();

            Console.WriteLine($"Hittade {UserPunchCards.Count} klippkort.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Gick ej att ladda klippkort: {ex.Message}");
            StatusMessage = "Fel uppstod när klippkort skulle laddas.";
        }
    }

    public class PunchCardFormModel
    {
        [Required]
        public string Type { get; set; } = "";

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Antal klipp måste vara minst 1.")]
        public int TotalUses { get; set; }
    }

    // private async Task TriggerConfetti()
    // {
    //     await JS.InvokeVoidAsync("confettiEffect", "#confettiButton");
    // }
}





