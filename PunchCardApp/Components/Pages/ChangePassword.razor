@page "/changepassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using PunchCardApp.Components.Account
@using PunchCardApp.Components.Account.Shared
@using PunchCardApp.Data
@using Azure.Messaging.ServiceBus
@using Newtonsoft.Json
@using PunchCardApp.Filters

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IConfiguration Configuration

<PageTitle>Muskelbyrån - byte av lösenord</PageTitle>

<section id="signup">
	<div class="container">
		<div class="logo">
			<a href="/">
				<img src="/images/header.jpg" alt="Muskelbyrån Logo" />
			</a>
		</div>

		@if (!string.IsNullOrEmpty(@StatusMessage))



		{
			<div class="alerter">
				@StatusMessage
			</div>
		}

		<StatusMessage Message="@Message" />
		<EditForm Model="SignUpForm" OnValidSubmit="OnValidSubmit" FormName="changepwd" method="post" novalidate>

			<DataAnnotationsValidator />
			<h5>Ändra ditt lösenord</h5>

			<div class="form">

				<div class="form-floating mb-3">
					<div id="form-email" class="input-group">
						<InputText @bind-Value="SignUpForm.Email" type="email" autocomplete="email" aria-required="true" placeholder="namn@domain.com" />
						<ValidationMessage For="() => SignUpForm.Email" />
					</div>
				</div>
				<div class="form-floating mb-3">
					<div id="form-password" class="input-group">
						<InputText @bind-Value="SignUpForm.Password" type="password" autocomplete="password" aria-required="true" placeholder="Lösenord" />
						<ValidationMessage For="() => SignUpForm.Password" />
					</div>
				</div>

				<div class="form-floating mb-3">
					<div id="form-confirm" class="input-group">
						<InputText @bind-Value="SignUpForm.ConfirmPassword" type="password" autocomplete="confirm" aria-required="true" placeholder="Bekräfta lösenord" />
						<ValidationMessage For="() => SignUpForm.ConfirmPassword" />
					</div>
				</div>

				<div id="form-terms" class="checkbox mb-3 d-flex align-items-center">
					<InputCheckbox @bind-Value="SignUpForm.TermsAndConditions" class="darker-border-checkbox form-check-input me-2" />
					<label class="form-label mb-0">I agree to the Terms & Conditions.</label>
				</div>


				<div id="form-button">
					<button class="w-100 btn btn-lg btn-primary" type="submit">Ändra lösenord</button>
				</div>
			</div>
		</EditForm>
		<div class="login-footer">
			<p>
				<a href="@(NavigationManager.GetUriWithQueryParameters("signin", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Har du redan ett konto?</a>
			</p>
			<p>
				<a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
			</p>
			<p>
				<strong>© @DateTime.Now.Year Muskelbyrån.</strong>
			</p>
		</div>
	</div>
</section>

@code {

private IEnumerable<IdentityError>? identityErrors;

[SupplyParameterFromQuery]
public string? StatusMessage { get; set; } = "";

[SupplyParameterFromQuery]
public string? ReturnUrl { get; set; }

private string? Message => identityErrors?.Any() == true ? $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}" : null;

[SupplyParameterFromForm]
public SignUpFormModel SignUpForm { get; set; } = new();

public async Task OnValidSubmit(EditContext editContext)
{
	var user = await UserManager.FindByEmailAsync(SignUpForm.Email);

	if (user == null)
	{
		StatusMessage = "Användaren kunde inte hittas.";
		return;
	}

	var removeResult = await UserManager.RemovePasswordAsync(user);

	if (!removeResult.Succeeded)
	{
		StatusMessage = "Kunde inte ta bort det gamla lösenordet.";
		identityErrors = removeResult.Errors;
		return;
	}

	var addResult = await UserManager.AddPasswordAsync(user, SignUpForm.Password);

	if (!addResult.Succeeded)
	{
		StatusMessage = "Kunde inte lägga till det nya lösenordet.";
		identityErrors = addResult.Errors;
		return;
	}

	user.MustChangePassword = false;
	await UserManager.UpdateAsync(user);
	await SignInManager.RefreshSignInAsync(user);

	StatusMessage = "Ditt lösenord har uppdaterats.";
	NavigationManager.NavigateTo("/account");
	}

public class SignUpFormModel
{
	[Display(Name = "Email", Prompt = "Enter your email address", Order = 2)]
	[Required(ErrorMessage = "Email address is required")]
	[DataType(DataType.EmailAddress)]
	[RegularExpression(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$", ErrorMessage = "Invalid email address")]
	public string Email { get; set; } = null!;

	[Display(Name = "Password", Prompt = "Enter your password", Order = 3)]
	[Required(ErrorMessage = "Password is required")]
	[DataType(DataType.Password)]
	[RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", ErrorMessage = "Invalid password. must be a strong password")]
	public string Password { get; set; } = null!;

	[Display(Name = "Confirm Password", Prompt = "Confirm password", Order = 4)]
	[Required(ErrorMessage = "Password must be confirmed")]
	[DataType(DataType.Password)]
	[Compare(nameof(Password), ErrorMessage = "Password does not match")]
	public string ConfirmPassword { get; set; } = null!;

	[CheckboxRequired]
	[Display(Name = "I agree to the Terms & Condítions.", Prompt = "Terms and Conditions", Order = 5)]
	public bool TermsAndConditions { get; set; }
	}
}