@page "/signin"
@using PunchCardApp.Components.Layout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using PunchCardApp.Components.Account
@using PunchCardApp.Components.Account.Shared
@using PunchCardApp.Data

@layout EmptyLayout

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Muskelbyrån - Inloggning</PageTitle>

<section id="signin">
    <div class="container">
        <div class="logo">
            <a href="/">
                <img src="/images/header.jpg" alt="Muskelbyrån Logo" />
            </a>
        </div>
        <h5>Inloggning</h5>
        <div class="form">
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Logga in</button>
                </div>                
            </EditForm>
        </div>
        <div class="social-or">eller </div>
        <div class="social-option">
@*             <a href="www.facebook.com" target="_blank" class="socialmedia-item"><i class="fa-brands fa-facebook-f"></i></a>
            <a href="www.facebook.com" target="_blank" class="socialmedia-item"><i class="fa-brands fa-linkedin"></i></a>
            <a href="www.facebook.com" target="_blank" class="socialmedia-item"><i class="fa-brands fa-google"></i></a> *@
            <button class="btn btn-ultra-voilet btn-fab" onclick="window.open('https://www.facebook.com', '_blank')">
                <i class="fa-brands fa-facebook"></i>
            </button>
            <button class="btn btn-ultra-voilet btn-fab" onclick="window.open('https://www.facebook.com', '_blank')">
                <i class="fa-brands fa-linkedin"></i>
            </button>
            <button class="btn btn-ultra-voilet btn-fab" onclick="window.open('https://www.facebook.com', '_blank')">
                <i class="fa-brands fa-google"></i>
            </button>
        </div>
        <div class="login-footer">
            <p>
                <a href="Account/ForgotPassword">Glömt ditt lösenord?</a>            
            </p>
            <p>
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Skapa ett nytt konto</a>
            </p>
            <p>
                <a href="Account/ResendEmailConfirmation">Skicka ny e-post bekräftelse</a>
            </p>
            <p>
                <strong>© @DateTime.Now.Year Muskelbyrån.</strong>
            </p>
        </div>
    </div>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

            if (string.IsNullOrEmpty(ReturnUrl))
            {
                ReturnUrl = "/account";
            }
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(string.IsNullOrEmpty(ReturnUrl) ? "/account" : ReturnUrl);

            // RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
