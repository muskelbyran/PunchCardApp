@page "/confirmation"

@rendermode InteractiveAuto

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Data.SqlClient
@using PunchCardApp.Components.Account
@using PunchCardApp.Data
@using Azure.Messaging.ServiceBus
@using Newtonsoft.Json
@using System.ComponentModel.DataAnnotations

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject RoleManager<IdentityRole> RoleManager
@inject IdentityRedirectManager RedirectManager
@inject HttpClient Http
@inject IConfiguration Configuration

<PageTitle>Register confirmation</PageTitle>
<section id="confirm">
    <div class="container">
        <EditForm Model="VerifyCodeForm" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <h1>Verify Your Account</h1>
            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label>Code</label>
                    <InputText @bind-Value="VerifyCodeForm.Code" />
                    <ValidationMessage For="() => VerifyCodeForm.Code" />
                    <p>@statusMessage</p>
                </div>
                <div id="form-button">
                    <button class="btn btn-theme" type="submit" disabled="@isSubmitting">
                        @(isSubmitting ? "Verifying..." : "Verify Code")
                    </button>
                </div>
            </div>
        </EditForm>
        <p>Didn't receive an email? <button @onclick="ResendCode">Resend email</button></p>
    </div>
</section>

@code {
    private string? statusMessage;
    private bool isSubmitting = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    public VerifyCodeModel VerifyCodeForm { get; set; } = new VerifyCodeModel();

    public async Task OnValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(Email))
        {
            statusMessage = "Missing email.";
            return;
        }

        isSubmitting = true; 
        try
        {
            var query = @"
        SELECT *
        FROM [dbo].[VerificationRequests]
        WHERE [Email] = @Email AND [Code] = @Code";

            using (var connection = new SqlConnection(Configuration.GetConnectionString("DefaultConnection")))
            {
                await connection.OpenAsync();

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Email", Email);
                    command.Parameters.AddWithValue("@Code", VerifyCodeForm.Code);

                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (reader.HasRows)
                        {
                            while (await reader.ReadAsync())
                            {
                                var recordExpiryDate = reader.GetDateTime(reader.GetOrdinal("ExpiryDate"));

                                if (recordExpiryDate < DateTime.UtcNow)
                                {
                                    statusMessage = "Code has expired.";
                                    return;
                                }

                                var user = await UserManager.FindByEmailAsync(Email!);
                                if (user != null)
                                {
                                    user.EmailConfirmed = true;
                                    await UserManager.UpdateAsync(user);
                                    await UserManager.AddToRoleAsync(user, "User");

                                    if (user.MustChangePassword)
                                    {
                                        NavigationManager.NavigateTo($"/changepassword?email={Email}");
                                        return;
                                    }
                                    else
                                    {
                                        NavigationManager.NavigateTo(ReturnUrl ?? "/account");
                                        return;
                                    }
                                }
                                else
                                {
                                    statusMessage = "User not found.";
                                }
                            }
                        }
                        else
                        {
                            statusMessage = "Invalid verification code.";
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            statusMessage = "An error occurred: " + ex.Message;
        }
        finally
        {
            isSubmitting = false; 
        }
    }


    private async Task ResendCode()
    {
        try
        {
            // Get the Service Bus connection string and queue name from configuration
            var serviceBusConnectionString = Configuration["AzureServiceBus:ConnectionString"];
            var serviceBusQueueName = Configuration["AzureServiceBus:QueueName"];

            if (string.IsNullOrEmpty(serviceBusConnectionString) || string.IsNullOrEmpty(serviceBusQueueName))
            {
                statusMessage = "Service Bus configuration is missing.";
                return;
            }

            // Create the Service Bus client and sender
            var serviceBusClient = new ServiceBusClient(serviceBusConnectionString);
            var serviceBusSender = serviceBusClient.CreateSender(serviceBusQueueName);

            // Serialize the email into the message body
            var messageBody = JsonConvert.SerializeObject(new { Email = Email });
            var serviceBusMessage = new ServiceBusMessage(messageBody);

            // Send the message to the Service Bus
            await serviceBusSender.SendMessageAsync(serviceBusMessage);

            statusMessage = "Verification email resent successfully.";
        }
        catch (Exception ex)
        {
            statusMessage = "Failed to resend code: " + ex.Message;
        }
    }

    public class ValidateRequest
    {
        public string Email { get; set; } = null!;
        public string Code { get; set; } = null!;
        public DateTime ExpiryDate { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
    }

    public class VerifyCodeModel
    {
        [Required]
        public string Code { get; set; } = null!;
    }
}   