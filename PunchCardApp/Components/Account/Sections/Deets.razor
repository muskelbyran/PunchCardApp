@page "/account/deets"

@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

<PageTitle>Klippkort</PageTitle>

<AuthorizeView>
	<Authorized>
		<main class="main-deets-container">
			<div class="aardvark-toast">
				<StatusToast Message="@StatusMessage"
							 Class="alert-success"
							 Duration="8000"
							 OnDismiss="@(() => StatusMessage = "")" />
			</div>

			<div class="main-deets">
				@if (selectedUser != null)
				{
					<ul class="tabs">
						@foreach (var tab in Enum.GetValues<Tab>())
						{
							<li class="tab-item">
								<button class="tab-button @(selectedTab == tab ? "active" : "")"
										@onclick="() => SelectTab(tab)">
									@tab
								</button>
							</li>
						}
					</ul>

					<div class="tab-content">
						<DynamicComponent Type="CurrentTabComponent" Parameters="CurrentTabParameters" />
					</div>
				}
			</div>
		</main>
	</Authorized>
</AuthorizeView>

@code {
	private enum Tab { Profil, Klippkort, Alternativ }

	private ApplicationUser? selectedUser;
	private Tab selectedTab = Tab.Profil;
	private string StatusMessage = "";

	private Dictionary<Tab, Type> tabComponentMap = new()
	{
		{ Tab.Profil, typeof(UserProfileTab) },
		{ Tab.Klippkort, typeof(PunchCardTab) },
		{ Tab.Alternativ, typeof(SettingsTab) }
	};

	private Dictionary<string, object> CurrentTabParameters => selectedUser == null
		? new()
		: new()
		{
			{ "User", selectedUser }, 
			{ "OnStatusMessageChanged", EventCallback.Factory.Create<string>(this, HandleStatusMessage) } };

	private Type CurrentTabComponent => tabComponentMap[selectedTab];

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity?.IsAuthenticated ?? false)
		{
			var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

			if (userId != null)
			{
				selectedUser = await DbContext.Users
					.Include(u => u.UserProfile)
					.FirstOrDefaultAsync(u => u.Id == userId);
			}
		}

		SelectTab(Tab.Profil);
	}

	private void SelectTab(Tab tab) => selectedTab = tab;

	private Task HandleStatusMessage(string message)
	{
		StatusMessage = message;
		StateHasChanged();
		return Task.CompletedTask;
	}
}
