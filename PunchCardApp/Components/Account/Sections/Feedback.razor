@page "/Account/Feedback"

@using PunchCardApp.Components.Account.Shared
@using PunchCardApp.Components.Assets
@using PunchCardApp.Entities
@using PunchCardApp.Models
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider

@layout AccountLayout
@rendermode InteractiveServer

<PageTitle>Feedback</PageTitle>

<main class="feedback-content">
	<div class="feedback-toast">
		<StatusToast Message="@StatusMessage"
					 Class="alert-success"
					 Duration="8000"
					 OnDismiss="@(() => StatusMessage = "")" />
	</div>
	<h1>Feedback</h1>
	<p>Din feedback är viktig för vidareutveckling av den här sidan.</p>

	<EditForm Model="@FeedbackForm" OnValidSubmit="OnValidSubmit" FormName="feedback" novalidate>
		<DataAnnotationsValidator />
	@* 	<ValidationSummary /> *@
		<h5>Skicka feedback</h5>

		<div class="form">
			<div class="form-floating">
				<InputTextArea @bind-Value="FeedbackForm.Message" autocomplete="off" aria-required="true" placeholder="Din feedback" class="form-control" />
				<ValidationMessage For="() => FeedbackForm.Message" />
			</div>

			<div class="mb-3">
				<label class="form-label" for="feedbackType">Typ av feedback</label>
				<InputSelect id="feedbackType" class="form-select" @bind-Value="FeedbackForm.FeedbackType">
					<option value="">-- Välj en typ --</option>
					<option value="Typo">Typo</option>
					<option value="Bug">Bug</option>
					<option value="Idea">Idea</option>
					<option value="Praise">Praise</option>
				</InputSelect>
				<ValidationMessage For="() => FeedbackForm.FeedbackType" />
			</div>

			<div id="form-button">
				<button class="btn btn-primary" type="submit">Skicka feedback</button>
			</div>
		</div>
	</EditForm>

</main>

@code {
	[SupplyParameterFromForm]
	private FeedbackModel FeedbackForm { get; set; } = new();

	private ApplicationUser? selectedUser;
	private string? StatusMessage;

	private async Task OnValidSubmit(EditContext editContext)
	{
		try
		{
			var authState = await AuthStateProvider.GetAuthenticationStateAsync();
			var user = authState.User;

			if (user.Identity?.IsAuthenticated ?? false)
			{
				var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

				if (userId != null)
				{
					selectedUser = await DbContext.Users
						.AsNoTracking()
						.Include(u => u.UserProfile)
						.FirstOrDefaultAsync(u => u.Id == userId);
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading user details: {ex.Message}");
		}

		if (selectedUser == null || selectedUser.UserProfile?.FirstName == null)
		{
			StatusMessage = "Användarnamn hittades inte!";
			return;
		}

		string FirstName = selectedUser.UserProfile?.FirstName ?? "Unknown";
		string LastName = selectedUser.UserProfile?.LastName ?? "User";

		var feedbackEntity = new FeedbackEntity
			{
				FromName = $"{FirstName} {LastName}",
				Message = FeedbackForm.Message,
				FeedbackType = FeedbackForm.FeedbackType,
				SubmittedAt = DateTime.UtcNow
			};



		try
		{
			DbContext.Add(feedbackEntity);
			await DbContext.SaveChangesAsync();

			await HandleStatusMessage("Tack för din feedback!");
			FeedbackForm = new FeedbackModel();
		}
		catch (Exception ex)
		{
			StatusMessage = $"An error occurred while submitting feedback: {ex.Message}";
		}
	}

	private Task HandleStatusMessage(string message)
	{
		Console.WriteLine($"Setting StatusMessage: {message}");
		StatusMessage = message;
		StateHasChanged();
		return Task.CompletedTask;
	}
}