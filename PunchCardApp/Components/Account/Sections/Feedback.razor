@page "/account/feedback"

@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider

@rendermode InteractiveServer

<PageTitle>Feedback</PageTitle>

<main class="feedback-content">
	<div class="feedback-toast">
		<StatusToast Message="@StatusMessage"
					 Class="alert-success"
					 Duration="8000"
					 OnDismiss="@(() => StatusMessage = "")" />
	</div>
	@* 	<ValidationSummary /> *@

	<div class="contact-splitscreen">
			<div class="contact">
          <h1>
            Kontakt info
          </h1>
          <address>
            <p><i class="fa fa-home"></i>Adress: Hantverksbyn 3, 78433, Borlänge</p>
            <p><i class="fa fa-phone"></i>Telefon: 073-369 23 93</p>
            <p><i class="fa fa-envelope"></i>E-post: muskelbyran@live.se</p>
            <p><i class="fa fa-globe"></i>Hemsida: muskelbyran.eu</p>
			<p><i class="fa-regular fa-file"></i>Vi har så klart F-skattesedel!</p>
            <br>
            <p><em>Nästan</em> alla foton tagna av <a href="https://www.facebook.com/picsbyp/" target="new"><strong>Pics
                  by Penny</strong></a>!</p>
          </address>
        </div>
	<div class="feedback">
			<EditForm Model="@FeedbackForm" OnValidSubmit="OnValidSubmit" FormName="feedback" novalidate>
				<DataAnnotationsValidator />
				<h5>Skicka feedback</h5>
				<p>Din feedback är viktig för vidareutveckling av funktion och utseende.</p>
				<div class="form">
					<div class="form-floating">
						<InputTextArea @bind-Value="FeedbackForm.Message" autocomplete="off" aria-required="true" placeholder="Din feedback" class="form-control" />
						<ValidationMessage For="() => FeedbackForm.Message" />
					</div>
					<div class="mb-3">
						<label class="form-label" for="feedbackType">Typ av feedback</label>
						<InputSelect id="feedbackType" class="form-select" @bind-Value="FeedbackForm.FeedbackType">
							<option value="">-- Välj en typ --</option>
							<option value="Typo">Typo</option>
							<option value="Bug">Bug</option>
							<option value="Idea">Idea</option>
							<option value="Praise">Praise</option>
						</InputSelect>
						<ValidationMessage For="() => FeedbackForm.FeedbackType" />
					</div>

					<div id="form-button">
						<button class="btn btn-primary" type="submit">Skicka feedback</button>
					</div>
				</div>
	</EditForm>
	</div>
	</div>


		

</main>

@code {
	[SupplyParameterFromForm]
	private FeedbackModel FeedbackForm { get; set; } = new();

	private ApplicationUser? selectedUser;
	private string? StatusMessage;

	private async Task OnValidSubmit(EditContext editContext)
	{
		try
		{
			var authState = await AuthStateProvider.GetAuthenticationStateAsync();
			var user = authState.User;

			if (user.Identity?.IsAuthenticated ?? false)
			{
				var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

				if (userId != null)
				{
					selectedUser = await DbContext.Users
						.AsNoTracking()
						.Include(u => u.UserProfile)
						.FirstOrDefaultAsync(u => u.Id == userId);
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading user details: {ex.Message}");
		}

		if (selectedUser == null || selectedUser.UserProfile?.FirstName == null)
		{
			StatusMessage = "Användarnamn hittades inte!";
			return;
		}

		string FirstName = selectedUser.UserProfile?.FirstName ?? "Unknown";
		string LastName = selectedUser.UserProfile?.LastName ?? "User";

		var feedbackEntity = new FeedbackEntity
			{
				FromName = $"{FirstName} {LastName}",
				Message = FeedbackForm.Message,
				FeedbackType = FeedbackForm.FeedbackType,
				SubmittedAt = DateTime.UtcNow
			};

		try
		{
			DbContext.Add(feedbackEntity);
			await DbContext.SaveChangesAsync();

			await HandleStatusMessage("Tack för din feedback!");
			FeedbackForm = new FeedbackModel();
		}
		catch (Exception ex)
		{
			StatusMessage = $"An error occurred while submitting feedback: {ex.Message}";
		}
	}

	private Task HandleStatusMessage(string message)
	{
		Console.WriteLine($"Setting StatusMessage: {message}");
		StatusMessage = message;
		StateHasChanged();
		return Task.CompletedTask;
	}
}