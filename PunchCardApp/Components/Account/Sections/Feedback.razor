@page "/Account/Feedback"
@using PunchCardApp.Entities
@using PunchCardApp.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Feedback</PageTitle>

<main class="main-content">
    <div class="content-card">
        <h1>Feedback</h1>
        <p>Din feedback är viktig för vidareutveckling av den här sidan.</p>

        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert alert-info">@StatusMessage</div>
        }

        <EditForm Model="@FeedbackForm" OnValidSubmit="OnValidSubmit" FormName="feedback" method="post" novalidate>
            <DataAnnotationsValidator />
            <h5>Skicka feedback</h5>

            <div class="form">
                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="FeedbackForm.Message" autocomplete="off" aria-required="true" placeholder="Din feedback" />
                    <ValidationMessage For="() => FeedbackForm.Message" />
                </div>
                <div id="form-issues" class="mb-3">
                    <label class="form-label">Typ av feedback</label>
                    <div>
                        <InputCheckbox @bind-Value="FeedbackForm.IsTypo" class="me-2" /> Typo
                        <InputCheckbox @bind-Value="FeedbackForm.IsBug" class="me-2" /> Bug
                        <InputCheckbox @bind-Value="FeedbackForm.IsIdea" class="me-2" /> Idea
                        <InputCheckbox @bind-Value="FeedbackForm.IsPraise" class="me-2" /> Praise
                    </div>
                </div>         
                <div id="form-button">
                    <button class="w-100 btn btn-lg btn-primary" type="submit">Skicka feedback</button>
                </div>
            </div>
        </EditForm>

    </div>
</main>

@code {
    [SupplyParameterFromForm]
    private FeedbackModel FeedbackForm { get; set; } = new();

    [Parameter]
    public Guid userId { get; set; }

    private string? StatusMessage;

    private async Task OnValidSubmit(EditContext editContext)
    {
        Console.WriteLine($"FromName: {FeedbackForm.FromName}, Message: {FeedbackForm.Message}, IsTypo: {FeedbackForm.IsTypo}");

        var currentUser = await DbContext.Users
            .Include(u => u.UserProfile)
            .Include(u => u.UserAddress)
            .FirstOrDefaultAsync(u => u.Id == userId.ToString());

        string FirstName = string.Empty;
        string LastName = string.Empty;

        if (currentUser != null)
        {
            FirstName = currentUser.UserProfile?.FirstName ?? "";
            LastName = currentUser.UserProfile?.LastName ?? "";
        }

        Console.WriteLine($"{FirstName} {LastName}");

        var feedbackEntity = new FeedbackEntity
            {
                FromName = FirstName + " " + LastName, 
                Message = FeedbackForm.Message,
                IsTypo = FeedbackForm.IsTypo,
                IsBug = FeedbackForm.IsBug,
                IsIdea = FeedbackForm.IsIdea,
                IsPraise = FeedbackForm.IsPraise,
                SubmittedAt = DateTime.UtcNow
            };

        try
        {
            DbContext.Add(feedbackEntity);
            await DbContext.SaveChangesAsync();

            StatusMessage = "Feedback submitted successfully!";
            FeedbackForm = new FeedbackModel(); 
        }
        catch (Exception ex)
        {
            StatusMessage = $"An error occurred while submitting feedback: {ex.Message}";
        }
    }
}
