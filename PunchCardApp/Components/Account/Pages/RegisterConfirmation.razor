@page "/Account/RegisterConfirmation"
@rendermode InteractiveServer

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using PunchCardApp.Data
@using Azure.Messaging.ServiceBus
@using Newtonsoft.Json
@using System.ComponentModel.DataAnnotations

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject RoleManager<IdentityRole> RoleManager
@inject IdentityRedirectManager RedirectManager
@inject HttpClient Http
@inject IConfiguration Configuration

@* <SiliconWebApp.Components.Pages.Shared.Header /> *@

<PageTitle>Register confirmation</PageTitle>

<section id="signup">
    <div class="container">

        <EditForm Model="VerifyCodeForm" OnValidSubmit="OnValidSubmit" asp-route-returnUrl="@ReturnUrl" FormName="verifycode" method="post" novalidate>
            <DataAnnotationsValidator />
            <h1>Verify Your Account</h1>

            <div class="content">

                <div id="form-firstname" class="input-group">
                    <label>Code</label>
                    <InputText @bind-Value="VerifyCodeForm.Code" />
                    <ValidationMessage For="() => VerifyCodeForm.Code" />
                    <p>@statusMessage</p>
                </div>

                <div id="form-button">
                    <button class="btn btn-theme" type="submit">Verify Code</button>
                </div>
            </div>
        </EditForm>

        <p>Didn't receive an email? <button @onclick="ResendCode">Resend email</button></p>

    </div>
</section>

@* <SiliconWebApp.Components.Pages.Shared.Footer /> *@

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    public VerifyCodeModel VerifyCodeForm { get; set; } = new VerifyCodeModel();

    public async Task OnValidSubmit()
    {
        var result = await Http.PostAsJsonAsync("https://verificationprovider-silicon-js.azurewebsites.net/api/validate?code=7mBkjGNtJrEiC-mvT-jIf-Ga8hBDbCHbsh_qlLZ-DlvYAzFugDSiZQ%3D%3D", new { Email = Email, Code = VerifyCodeForm.Code });

        if (result.IsSuccessStatusCode)
        {
            var user = await UserManager.FindByEmailAsync(Email!);
            user!.EmailConfirmed = true;
            await UserManager.UpdateAsync(user);
            await UserManager.AddToRoleAsync(user, "User");
            RedirectManager.RedirectTo("account/login");
        }
        else
        {
            statusMessage = "No such code";
        }
    }

    private async Task ResendCode()
    {
        try
        {
            // Get the Service Bus connection string and queue name from configuration
            var serviceBusConnectionString = Configuration["AzureServiceBus:ConnectionString"];
            var serviceBusQueueName = Configuration["AzureServiceBus:QueueName"];

            if (string.IsNullOrEmpty(serviceBusConnectionString) || string.IsNullOrEmpty(serviceBusQueueName))
            {
                statusMessage = "Service Bus configuration is missing.";
                return;
            }

            // Create the Service Bus client and sender
            var serviceBusClient = new ServiceBusClient(serviceBusConnectionString);
            var serviceBusSender = serviceBusClient.CreateSender(serviceBusQueueName);

            // Serialize the email into the message body
            var messageBody = JsonConvert.SerializeObject(new { Email = Email });
            var serviceBusMessage = new ServiceBusMessage(messageBody);

            // Send the message to the Service Bus
            await serviceBusSender.SendMessageAsync(serviceBusMessage);

            statusMessage = "Verification email resent successfully.";
        }
        catch (Exception ex)
        {
            statusMessage = "Failed to resend code: " + ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
    }

    public class VerifyCodeModel
    {
        [Required]
        public string Code { get; set; } = null!;

    }
}