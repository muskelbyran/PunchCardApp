@page "/Account"

@layout AdminLayout

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject PunchCardService PunchCardService
@inject CourseService CourseService

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<main class="main-content-container">
    <div class="main-section">
        @if (UserPunchCards != null && UserPunchCards.Any())
        {
            <table class="punch-table">
                <thead>
                    <tr>
                        <th>Typ</th>                      
                        <th>Totalt klippkort</th>
                        <th>Klipp kvar</th>
                        <th>Åtgärd</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var card in UserPunchCards)
                    {
                        <tr>
                            <td>@card.Type</td>
                            <td>@card.TotalUses</td>
                            <td>@card.UsesLeft klipp kvar</td>
@*                             <td>
                                <progress class="punch-progress" value="@(card.TotalUses - card.UsesLeft)" max="@card.TotalUses"></progress>
                            </td> *@
                            <td>
                                <PunchButton PunchCardId="@card.Id" CssClass="btn btn-primary" ButtonText="Färdigknådad!" OnPunchUsed="LoadUserPunchCardsAsync" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Ingen historik att visa.</p>
        }
    </div>

    @if (courses == null)
    {
        <p>Laddar kurser...</p>
    }
    else
    {
        <div class="course-grid">
            @foreach (var course in SortedCoursesList)
            {
                <CourseCard Course="course" />
            }
        </div>
    }
  
    <div class="main-content">
      <div class="content-card">
            @if (UserPunchCards != null && UserPunchCards.Any())
            {
                @foreach (var card in UserPunchCards)
                {
                    <div class="punch-card">
                        <h4>@card.Type</h4>

                        <PunchButton PunchCardId="@card.Id" CssClass="btn btn-copper" ButtonText="Färdigknådad!" OnPunchUsed="LoadUserPunchCardsAsync" />


                        <div class="punches">
                            <h3>@card.TotalUses klippkort</h3>
@*                             @for (int i = 0; i < card.TotalUses; i++)
                            {
                                <i class="fa-solid fa-heart" style="color: @(i < card.TotalUses - card.UsesLeft ? "red" : "black");"></i>
                            } *@
                            <progress class="punch-progress" value="@(card.TotalUses - card.UsesLeft)" max="@card.TotalUses"></progress>
                            <p>@card.UsesLeft klipp kvar.</p>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>Ingen historik att visa.</p>
            }
        </div>
        <div class="button-card">
            <button class="btn btn-pink" @onclick="ShowNewsContent">Nyheter</button>
            <button class="btn btn-pink" @onclick="ShowFeedbackContent">Feedback</button>
            <button class="btn btn-pink" @onclick="ShowContactContent">Kontakt</button>
            <NavLink class="btn btn-pink" href="/Admin/Aardvark">Backoffice</NavLink>
        </div>
    </div>
    <aside class="right-content-placeholder">Testing 123...</aside>
    <aside class="right-content @( _isRightContentVisible ? "show" : "")">
        <i class="fa-solid fa-x close-icon" @onclick="ToggleRightContent"></i>
        <img src="/images/test.jpeg" />
    </aside>
    <aside class="right-content2 @( _isRightContentVisible2 ? "show" : "")">
        <i class="fa-solid fa-x close-icon" @onclick="ToggleRightContent2"></i>
       <PunchCardApp.Components.Account.Sections.Feedback />
    </aside>
    <aside class="right-content3 @( _isRightContentVisible3 ? "show" : "")">
        <i class="fa-solid fa-x close-icon" @onclick="ToggleRightContent3"></i>
       <PunchCardApp.Components.Account.Sections.Contact />
    </aside>
</main>

@code {
    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = "";

    private bool _isRightContentVisible = false;
    private bool _isRightContentVisible2 = false;
    private bool _isRightContentVisible3 = false;
    
    private List<CreateCourseModel>? courses;
    private List<CreateCourseModel> AllCourses = new();
    private List<CreateCourseModel> SortedCoursesList = new();

    private string? userName;

    public PunchCardFormModel PunchCardForm { get; set; } = new();
    public List<PunchCardEntity> UserPunchCards { get; set; } = new();
    private List<PunchCardHistoryModel> PunchCardHistory { get; set; } = new();
    public List<PunchCardHistoryModel> UserPunchCardHistory { get; set; } = new();


    private string? userId;

    private void ShowNewsContent()
    {
        _isRightContentVisible = true;
        _isRightContentVisible2 = false;
        _isRightContentVisible3 = false;
    }

    private void ShowFeedbackContent()
    {
        _isRightContentVisible = false;
        _isRightContentVisible2 = true;
        _isRightContentVisible3 = false;
    }

    private void ShowContactContent()
    {
        _isRightContentVisible = false;
        _isRightContentVisible2 = false;
        _isRightContentVisible3 = true;
    }

    private void ToggleRightContent()
    {
        _isRightContentVisible = !_isRightContentVisible;
    }

    private void ToggleRightContent2()
    {
        _isRightContentVisible2 = !_isRightContentVisible2;
    }

    private void ToggleRightContent3()
    {
        _isRightContentVisible3 = !_isRightContentVisible3;
    }

    protected override async Task OnInitializedAsync()
    {
        var courseEntities = await CourseService.GetAllCoursesAsync();
        AllCourses = MapEntitiesToModels(courseEntities);
        SortedCoursesList = AllCourses.OrderByDescending(course => course.StartDate).ToList();

        courses = MapEntitiesToModels(courseEntities);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated ?? false)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            if (currentUser != null)
            {
                userId = currentUser.Id;
                await LoadUserPunchCardsAsync();
                PunchCardHistory = await PunchCardService.GetPunchCardHistoryAsync(userId);
            }
            else
            {
                Console.WriteLine("Hittar inte användare!");
            }
        }      
    }

    private async Task LoadUserPunchCardsAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("Användare är null!");
                return;
            }

            var userProfileId = await DbContext.Users
                .Where(u => u.Id == userId)
                .Select(u => u.UserProfileId)
                .FirstOrDefaultAsync();

            if (string.IsNullOrEmpty(userProfileId))
            {
                Console.WriteLine("UserProfileId är null eller ej satt för användare: " + userId);
                return;
            }

            UserPunchCards = await DbContext.PunchCards
                .Where(pc => pc.UserProfileId == userProfileId)
                .Include(pc => pc.PunchCardUses)
                .ToListAsync();

            Console.WriteLine($"Hittade {UserPunchCards.Count} klippkort.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Gick ej att ladda klippkort: {ex.Message}");
            StatusMessage = "Fel uppstod när klippkort skulle laddas.";
        }
    }

    private async Task UsePunchCardAsync(int punchCardId, string usedBy)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        try
        {
            if (userName != null)
            {

                await PunchCardService.UsePunchCardAsync(punchCardId, userName);

                StatusMessage = "Punch card used successfully!";
                await LoadUserPunchCardsAsync();
            }
        }
        catch (Exception ex)
        { 
            StatusMessage = ex.Message;
        }
    }

    public class PunchCardFormModel
    {
        [Required]
        public string Type { get; set; } = "";

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Antal klipp måste vara minst 1.")]
        public int TotalUses { get; set; }
    }

    private List<CreateCourseModel> MapEntitiesToModels(List<CourseEntity> entities)
    {
        return entities.Select(entity => new CreateCourseModel
            {
                Title = entity.Title,
                Tagline = entity.Tagline,
                Category = entity.Category,
                Price = entity.Price,
                StartDate = entity.StartDate,
                Description = entity.Description,
                Times = entity.Times,
                Location = entity.Location,
                ImageUrl = entity.ImageUrl
            }).ToList();
    }
}